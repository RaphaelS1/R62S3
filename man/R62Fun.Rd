% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/R62Fun.R
\name{R62Fun}
\alias{R62Fun}
\title{Method Generator from R6 Class}
\usage{
R62Fun(R6Class, assignEnvir = parent.env(environment()))
}
\arguments{
\item{R6Class}{R6ClassGenerator to generate public methods from}

\item{assignEnvir}{environment in which to assign the S4 generics/methods, default is parent of current environment.}
}
\value{
Assigns methods and generics to the chosen environment.
}
\description{
Auto-generates methods from an R6 Class.
}
\details{
Searches in a given R6 class for all public methods that are not 'initialize' or 'clone'.
For each method if a generic does not already exist, one is created and assigned to the given environment.
Methods are created for every generic, following standard S4 convention.
}
\examples{
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
R62Fun(printMachine, assignEnvir = .GlobalEnv)
pm$printer("Test String A")
printer(pm, "Test String B")

}
