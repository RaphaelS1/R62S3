mu
matrix(mu,nrow=3)
matrix(mu,nrow=3,ncol=3)
matrix(mu,nrow=3,ncol=3,byrow=T)
matrix(mu,ncol=3,byrow=T)
K
cov
means
means = matrix(means,nrow=3,ncol=3,byrow = T)
means
xs
xs
xs-means
xs = c(1,3,7,2,4,5,1,5,9,1,4,2)
xs
matrix(xs,ncol=K)
xs = matrix(xs,ncol=K)
(2*pi)^(-K/2)
det(cov)^-0.5
xs
means
xs - means
xs
means = matrix(0,nrow=nrow(xs),ncol=K)
means
(2*pi)^(-K/2) * det(cov)^-0.5
xs
means
xs-means
(xs - means)
(-0.5 * (xs - means))
solve(cov)
(-0.5 * (xs - means)) %*% solve(cov)
t(xs - means))
t(xs - means)
-0.5 * (xs - means)) %*% solve(cov) %*%
exp((-0.5 * (xs - means)) %*% solve(cov) %*% t(xs - means))
xs
xs - means
(xs - means)
-0.5 * (xs - means)
-0.5 * (xs - means)) %*% solve(cov)
(-0.5 * (xs - means)) %*% solve(cov)
solve(cov)
xs - means
t(xs - means)
dmvn
(xs - means)) %*% solve(cov)
(xs - means) %*% solve(cov)
rowSums((xs - means) %*% solve(cov))
rowSums((xs - means) %*% solve(cov)) %*% t(xs - means))
rowSums((xs - means) %*% solve(cov)) %*% t(xs - means)))
rowSums((xs - means) %*% solve(cov)) %*% t(xs - means)
xs - means
rowSums((xs - means) %*% solve(cov)) %*% (xs - means)
-0.5 * rowSums((xs - means) %*% solve(cov)) %*% (xs - means)
rowSums((xs - means) %*% solve(cov))
xs - means
t(xs - means)
rowSums((xs - means) %*% solve(cov)) %*% t(xs - means)
t(rowSums((xs - means) %*% solve(cov)))
t(rowSums((xs - means) %*% solve(cov))) %*% t(xs - means))
t(rowSums((xs - means) %*% solve(cov))) %*% t(xs - means)
rowSums((xs - means) %*% solve(cov))
t(t(rowSums((xs - means) %*% solve(cov))))
t(t(rowSums((xs - means) %*% solve(cov)))) %*% t(xs - means)
t(t(rowSums((xs - means) %*% solve(cov)))) %*% t(xs - means))
xs - means
xs - means
dmvn
(xs - means) %*% solve(cov))
(xs - means) %*% solve(cov)
rowSums((xs - means) %*% solve(cov))
xs - means
rowSums((xs - means) %*% solve(cov)) * (xs - means)
-0.5 * rowSums((xs - means) %*% solve(cov)) * (xs - means)
dmvn
dmvn(matrix(1:4,nrow=2))
dmvn(matrix(1:4,nrow=2,ncol=2),mu=0)
dmvn(matrix(1:4,nrow=2,ncol=2),mu=0)
xs = matrix(1:4,nrow=2,ncol=2)
means = matrix(0,nrow=2,ncol=2)
cov = matrix(c(1,-1,-1,1))
cov
cov = matrix(c(1,-1,-1,1),nrow=2)
cov
t(cov)
eigen(cov)
Sigma = cov
dmvn
Omega <- as.inverse(Sigma)
Omega
solve(cov)
x
xs
mu
s = xs - means
s
s %*% Omega
rowSums(s %*% Omega)
rowSums(s %*% Omega) * ss
rowSums(s %*% Omega) * s
(rowSums(s %*% Omega) * s) * 0.5
log(2*pi)
log(2*pi)*k
dmvn
log(2*pi)*2
log(2*pi)*2 + logdet(Sigma)
logdet(Sigma)
x
self = x
K <- self$getParameterValue("K")
cov <- self$getParameterValue("cov")
xs <- matrix(unlist(mget(paste0("x",1:K))), ncol = K)
means <- matrix(self$getParameterValue("means"), nrow = nrow(xs), ncol = K, byrow = T)
K
cov
xs
xs = matrix(c(1:2,2:3,3:4),ncol=3)
xs
means
means <- matrix(self$getParameterValue("means"), nrow = nrow(xs), ncol = K, byrow = T)
means
rowSums((xs - means) %*% solve(cov))
rowSums((xs - means) %*% solve(cov)) * (xs - means)
exp(-0.5 * rowSums((xs - means) %*% solve(cov)) * (xs - means))
det(cov)^-0.5
(2*pi)^(-K/2)
(2*pi)^(-K/2) * det(cov)^-0.5 *
exp(-0.5 * rowSums((xs - means) %*% solve(cov)) * (xs - means))
dmvn(xs,means,cov)
dmvn
is.matrix(xs)
mu = means
x = xs
is.matrix(mu)
Sigma = cov
Sigma
as.symmetric.matrix(Sigma)
k <-nrow(Sigma)
dmvn
Omega <- as.inverse(Sigma)
ss <- x - mu
ss
z <- rowSums({
ss %*% Omega
} * ss)
z
xs
means
xs-means
ss
Omega
solve(cov)
rowSums({ss %*% Omega} * ss)
rowSums(ss %*% Omega * ss)
as.numeric((2*pi)^(-K/2) * det(cov)^-0.5 *
exp(-0.5 * rowSums((xs - means) %*% solve(cov) * (xs - means))))
dmvn(xs,means,cov)
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
x
x$pdf(1:3)
x$pdf(1:3,2:4,4:6)
x$pdf(1:2,2:3,4:5)
dmvn(matrix(c(1:2,2:3,4:5),ncol=3),0,matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
devtools::load_all()
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
x
x$getParameterValue('K')
x$getParameterValue('cov')
solve(x$getParameterValue('cov'))
as.numeric(solve(x$getParameterValue('cov')))
list(as.numeric(solve(x$getParameterValue('cov'))))
x$parameters()
y=x$parameters()
y$.__enclos_env__$private$.parameters
y$.__enclos_env__$private$.parameters$value
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
y = x$parameters()
y
z = y$.__enclos_env__$private$.parameters
z
x1=x
x = z[3,]
x
fnc = function(self){}
parse(text = "self$getParameterValue('cov')")
body(fnc) = parse(text = "self$getParameterValue('cov')")
fnc
fnc(self)
self = y
fnc(self)
z
x
x["value"]
y
y$.__enclos_env__$private$.parameters
y$.__enclos_env__$private$.parameters[3,"value"]
y$.__enclos_env__$private$.parameters[3,"value"] = body(fnc)
y$.__enclos_env__$private$.parameters[3,"value"] = fnc(y)
y$.__enclos_env__$private$.parameters[3,"value"] = list(fnc(y))
y$.__enclos_env__$private$.parameters[3,"value"]
y$.__enclos_env__$private$.parameters[3,"value"]
q=y$.__enclos_env__$private$.parameters[3,"value"]
q
unlist(q)
y$.__enclos_env__$private$.parameters[3,"value"] = as.list(fnc(y))
fnc(y)
y$.__enclos_env__$private$.parameters[3,"value"][[1]] = fnc(y)
y$.__enclos_env__$private$.parameters[3,"value"][[1]]
fnc(y)
y$.__enclos_env__$private$.parameters[3,"value"][[1]] = as.list(fnc(y))
as.list(fnc(y))
y$.__enclos_env__$private$.parameters[3,"value"][[1]] = list(fnc(y))
y
y$.__enclos_env__$private$.parameters$value
devtools::load_all()
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
getParameterSet.MultivariateNormal(means = rep(0,2), cov = matrix(c(1,1,1,1),nrow=2))
z = getParameterSet.MultivariateNormal(means = rep(0,2), cov = matrix(c(1,1,1,1),nrow=2))
z$setParameterValue(means = rep(0.3))
z$setParameterValue(means = rep(0,3))
z$setParameterValue(list(means = rep(0,3)))
z$setParameterValue(list(cov = matrix(c(1,1,1,1))))
?solve
z$setParameterValue(list(cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3)))
z$setParameterValue(list(cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3)))
matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3)
z$setParameterValue(list(cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3)))
z$setParameterValue(list(means = rep(0,3), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3)))
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
z$setParameterValue(list(means = rep(0,3), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3)))
z$setParameterValue(list(cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3)))
z
z = getParameterSet.MultivariateNormal(means = rep(0,3), cov = matrix(c(1,1,1,1),nrow=2))
z$setParameterValue(list(cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3)))
self = z
private = z$.__enclos_env__$private$.parameters
lst = list(cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
length(lst)
i=1
aid <- names(lst)[[i]]
value <- lst[[i]]
param <- dplyr::filter(self$as.data.table(), id == aid)
param
value <- as(value, param$support[[1]]$.__enclos_env__$private$.macType)
value
param$support
param$support[[1]]
param$support[[1]]$liesInSetInterval(value)
private$.parameters[private$.parameters[,"id"] %in% param$id, "value"][[1]] <- list(value)
self
private = self$$
private = self$.__enclos_env__$private
private$.parameters[private$.parameters[,"id"] %in% param$id, "value"][[1]] <- list(value)
private$.parameters
private$.parameters[,"id"]
param
private$.parameters[,"id"] %in% param$id
id
param$id
private$.parameters[,"id"]
private$.parameters[,"id"] %in% param$id
unlist(private$.parameters[,"id"])
unlist(private$.parameters[,"id"]) %in% param$id
private$.parameters[unlist(private$.parameters[,"id"]) %in% param$id, "value"]
private$.parameters[unlist(private$.parameters[,"id"]) %in% param$id, "value"][[1]]
private$.parameters[unlist(private$.parameters[,"id"]) %in% param$id, "value"][[1]] <- list(value)
private$.parameters
self$update()
any(!is.na(private$.parameters$updateFunc))
update_filter = !is.na(private$.parameters$updateFunc)
update_filter
updates = private$.parameters[update_filter,]
updates
x = updates[1,]
x
fnc = function(self){}
x[[6]]
body(fnc) = parse(text = x[[6]])
newval = fnc(self)
newval
as.numeric(newval)
private$.parameters[update_filter,"value"][[1]]
newvals = apply(updates, 1, function(x){
fnc = function(self){}
body(fnc) = parse(text = x[[6]])
newval = fnc(self)
})
newvals
as.numeric(newvals)
newvals = apply(updates, 1, function(x){
fnc = function(self){}
body(fnc) = parse(text = x[[6]])
newval = as.numeric(fnc(self))
})
newvals
private$.parameters[update_filter,"value"][[1]] = list(as.numeric(newvals))
as.numeric(newvals)
private$.parameters[update_filter,"value"][[1]] = newvals
private$.parameters
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
x
x$parameters()
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
x$parameters()
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
x$parameters()
x$setParameterValue(mean = 2)
x$setParameterValue(list(mean = 2))
x
x$setParameterValue(list(means = c(1,2)))
x
x$parameters()
x$setParameterValue(list(means = 2))
x$setParameterValue(list(means = c(2,5)))
x
x$getParameterValue("K")
dim(x$getParameterValue("means"))
x$getParameterValue("means")
rep(c(1,2),5)
rep(c(1,2),5)[1:5]
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
x
lst = list(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
!is.null(lst$cov)
dim(lst$cov)
c(self$getParameterValue("K"), self$getParameterValue("K")
c(self$getParameterValue("K"), self$getParameterValue("K"))
c(self$getParameterValue("K"), self$getParameterValue("K"))
self=x
c(self$getParameterValue("K"), self$getParameterValue("K"))
dim(lst$cov) != c(self$getParameterValue("K"), self$getParameterValue("K"))
c(self$getParameterValue("K"), self$getParameterValue("K"))
dim(lst$cov)
any(dim(lst$cov) != c(self$getParameterValue("K"), self$getParameterValue("K")))
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
x
x$setParameterValue(list(means=1))
x
x$setParameterValue(list(means=1:2))
x
y = x$parameters()
y$setParameterValue(means = c(1,4,5))
y$setParameterValue(list(means = c(1,4,5)))
y
private = y$.__enclos_env__$private
any(!is.na(private$.parameters$updateFunc))
update_filter = !is.na(private$.parameters$updateFunc)
updates = private$.parameters[update_filter,]
newvals = apply(updates, 1, function(x){
fnc = function(self){}
body(fnc) = parse(text = x[[6]])
newval = as.numeric(fnc(self))
})
private$.parameters[update_filter,"value"][[1]] = newvals
update_filter
updates
newvals
private
y
y$setParameterValue(list(means=1))
y$update()
y$setParameterValue(list(means=rep(1,3)))
y$setParameterValue(list(means=rep(1,3)))
y
y$update()
y$setParameterValue()
y$setParameterValue(list(means = c(1,2,3)))
y = x$parameters()
y$update()
y
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
y = x$parameters()
y$update()
y$update()
private = y$.__enclos_env__$private
any(!is.na(private$.parameters$updateFunc))
update_filter = !is.na(private$.parameters$updateFunc)
update_filter
updates = private$.parameters[update_filter,]
updates
newvals = apply(updates, 1, function(x){
fnc = function(self){}
body(fnc) = parse(text = x[[6]])
newval = as.numeric(fnc(self))
})
newvals
private$.parameters[update_filter,"value"][[1]]
newvals
private$.parameters[update_filter,"value"][[1]] = newvals
x
y = x$parameters()
y$update()
private = y$.__enclos_env__$private
if(any(!is.na(private$.parameters$updateFunc))){
update_filter = !is.na(private$.parameters$updateFunc)
updates = private$.parameters[update_filter,]
newvals = apply(updates, 1, function(x){
fnc = function(self){}
body(fnc) = parse(text = x[[6]])
newval = as.numeric(fnc(self))
})
private$.parameters[update_filter,"value"][[1]] = newvals
}
y$update()
z=y$update()
y
``
z
self = y
if(any(!is.na(private$.parameters$updateFunc))){
update_filter = !is.na(private$.parameters$updateFunc)
updates = private$.parameters[update_filter,]
newvals = apply(updates, 1, function(x){
fnc = function(self){}
body(fnc) = parse(text = x[[6]])
newval = as.numeric(fnc(self))
})
private$.parameters[update_filter,"value"][[1]] = newvals
}
self
y
y$update()
devtools::load_all()
y = x$parameters()
y$update()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
y = x$parameters()
y
y$update()
devtools::load_all()
x=MultivariateNormal$new(means = c(0,0,0), cov = matrix(c(3,-1,-1,-1,1,0,-1,0,1),byrow=T,nrow=3))
y = x$parameters()
x$upd
y$update()
any(!is.na(private$.parameters$updateFunc))
self = y
private = y$.__enclos_env__$private
any(!is.na(private$.parameters$updateFunc))
update_filter = !is.na(private$.parameters$updateFunc)
updates = private$.parameters[update_filter,]
newvals = apply(updates, 1, function(x){
fnc = function(self){}
body(fnc) = parse(text = x[[6]])
newval = as.numeric(fnc(self))
})
update_filter
updates
newvals
private$.parameters[update_filter,"value"][[1]]
newvals
private$.parameters[update_filter,"value"][[1]] = newvals
private$.parameters
private$.parameters$value
private$.parameters$value[[4]]
private$.parameters$value[[4]]=2
y
y$update()
slf
self
self = y$clone9
self = y$clone()
private = self$.__enclos_env__$private
private$.parameters$value
private$.parameters$value[[3]]
private$.parameters$value[[4]]
private$.parameters$value[[4]]=3
y
self
setwd("~/GitHub/R62S3")
devtools::check()
?R62S3
?R62S4
?R62S3
?R62S4
?R62Fun
install.packages("R62S3")
install.packages("R62S3")
setwd("~/GitHub/distr6")
devtools::load_all()
library(R62S3)
?r62s3
?R62S3::R62S3
unloadNamespace("R62S3")
?r62s3
?R62S3::R62S3
remove.packages(distr6)
remove.packages("R62S3")
devtools::load_all()
setwd("~/GitHub/R62S3")
devtools::document()
setwd("~/GitHub/R62S3")
devtools::document()
devtools::load_all()
