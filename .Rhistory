P1 + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank())
WorldData <- map_data('world')
df <-data.frame(region=c('Hungary','Lithuania','Argentina'),value=c(4,10,11))
Total <- merge(WorldData,df,by='region')
p <- ggplot()
p <- p + geom_polygon(data=Total, aes(x=long, y=lat, group = group,fill=Total$value),colour="white") +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar")
P1 <- p + theme_bw()  + labs(fill = "legend" ,title = "Title", x="", y="")
P1 + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank())
WorldData <- map_data('world')
df <-data.frame(region=c('Hungary','Lithuania','Argentina'),value=c(4,10,11))
Total <- merge(WorldData,df,by='region')
p <- ggplot()
p <- p + geom_polygon(data=Total, aes(x=long, y=lat, group = group,fill=Total$value),colour="white") +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar")
P1 <- p + theme_bw()  + labs(fill = "legend" ,title = "Title", x="", y="")
P1 + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank())
WorldData <- map_data('world')
df <-data.frame(region=c('Hungary','France','Argentina'),value=c(4,10,11))
Total <- merge(WorldData,df,by='region')
p <- ggplot()
p <- p + geom_polygon(data=Total, aes(x=long, y=lat, group = group,fill=Total$value),colour="white") +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar")
P1 <- p + theme_bw()  + labs(fill = "legend" ,title = "Title", x="", y="")
P1 + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank())
library(ggplot2)
library(dplyr)
WorldData <- map_data('world') %>% filter(region != "Antarctica") %>% fortify
df <- data.frame(region=c('Hungary','Lithuania','Argentina'),
value=c(4,10,11),
stringsAsFactors=FALSE)
p <- ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = df, map=WorldData,
aes(fill=value, map_id=region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
p
install.packages("mapproj")
library(ggplot2)
library(dplyr)
WorldData <- map_data('world') %>% filter(region != "Antarctica") %>% fortify
df <- data.frame(region=c('Hungary','Lithuania','Argentina'),
value=c(4,10,11),
stringsAsFactors=FALSE)
p <- ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = df, map=WorldData,
aes(fill=value, map_id=region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
p
p <- ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = df, map=WorldData,
aes(fill=value, map_id=region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
library(ggplot2)
library(dplyr)
WorldData <- map_data('world') %>% filter(region != "Antarctica") %>% fortify
df <- data.frame(region=c('Hungary','Lithuania','Argentina'),
value=c(4,10,11),
stringsAsFactors=FALSE)
p <- ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = df, map=WorldData,
aes(fill=value, map_id=region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
p
country <- c(
Ireland,
Sweden,
United Kingdom,
France,
Luxembourg,
Israel,
Netherlands,
Denmark,
Norway,
Germany,
Spain,
Switzerland,
Italy,
Ukraine,
Austria,
Russia,
Belgium,
Monaco,
Turkey,
Azerbaijan,
Greece,
Estonia,
Latvia,
Serbia,
Yugoslavia,
Finland,
Portugal,
Iceland,
Malta,
Bulgaria,
Cyprus,
Australia,
Poland,
Serbia and Montenegro,
Romania,
Bosnia and Herzegovina,
Moldova,
Croatia,
Hungary,
Armenia,
Albania,
Lithuania,
Belarus,
Czech Republic,
Slovenia,
Georgia,
Macedonia,
Montenegro,
Slovakia,
Morocco,
San Marino,
Andorra
)
install.packages("R62S3")
citation("R62S3")
install.packages("badgecreatr")
library(badgecreatr)
?badgecreatr
cite("R62S3")
citation("R62S3")
remotes::install_github("RaphaelS1/distr6")
library(distr6)
?remotes
?remotes::install_github
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
remotes::install_github("RaphaelS1/distr6","dev")
remotes::install_github("RaphaelS1/distr6","dev")
remotes::install_github("RaphaelS1/distr6","dev")
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
library(distr6)
as.environment("package:distr6")
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
remotes::install_github("RaphaelS1/distr6")
library(distr6)
listDistributions()
listWrappers()
listDecorators()
library(distr6)
listDistributions()
listWrappers(simplify = TRUE)
listDecorators(simplify = TRUE)
library(distr6)
listDistributions()
listWrappers(simplify = TRUE)
listDecorators(simplify = TRUE)
library(distr6)
dbinom(1:10, size = 10, prob = 0.5)
pbinom(1:10, size = 10, prob = 0.5)
qbinom(seq.int(0,1,length.out=10),size = 10, prob = 0.5)
B <- Binomial$new(size = 10, prob = 0.5)
# Option 1
B$pdf(1:10)
B$cdf(1:10)
B$quantile(seq.int(0,1,length.out=10))
# Option 2
pdf.Distribution(B, 1:10)
library(distr6)
dbinom(1:10, size = 10, prob = 0.5)
pbinom(1:10, size = 10, prob = 0.5)
qbinom(seq.int(0,1,length.out=10),size = 10, prob = 0.5)
B <- Binomial$new(size = 10, prob = 0.5)
# Option 1
B$pdf(1:10)
B$cdf(1:10)
B$quantile(seq.int(0,1,length.out=10))
# Option 2
#pdf.Distribution(B, 1:10)
cdf(B, 1:10)
remotes::install_github("RaphaelS1/distr6", ref = "dev")
library(distr6)
dbinom(1:10, size = 10, prob = 0.5)
pbinom(1:10, size = 10, prob = 0.5)
qbinom(seq.int(0,1,length.out=10),size = 10, prob = 0.5)
B <- Binomial$new(size = 10, prob = 0.5)
# Option 1
B$pdf(1:10)
B$cdf(1:10)
B$quantile(seq.int(0,1,length.out=10))
# Option 2
pdf.Distribution(B, 1:10)
library(distr6)
dbinom(1:10, size = 10, prob = 0.5)
pbinom(1:10, size = 10, prob = 0.5)
qbinom(seq.int(0,1,length.out=10),size = 10, prob = 0.5)
B <- Binomial$new(size = 10, prob = 0.5)
# Option 1
B$pdf(1:10)
B$cdf(1:10)
B$quantile(seq.int(0,1,length.out=10))
# Option 2
#pdf.Distribution(B, 1:10)
cdf(B, 1:10)
library(distr6)
library(distr6)
# 1. Find the number 1.96 from the Normal distribution
Normal$new()$quantile(0.75)
# 1. Find the number 1.96 from the Normal distribution
Normal$new()$quantile(0.975)
#
# 2. Plot the pmf of a Truncated Binomial distribution between 3 and 7 -
#   Note: Think about the original size of the distribution
TB <- Binomial(prob = 0.5, size = 10) %>% truncate(3, 7)
library(magrittr)
#
# 2. Plot the pmf of a Truncated Binomial distribution between 3 and 7 -
#   Note: Think about the original size of the distribution
TB <- Binomial(prob = 0.5, size = 10) %>% truncate(3, 7)
#
# 2. Plot the pmf of a Truncated Binomial distribution between 3 and 7 -
#   Note: Think about the original size of the distribution
TB <- Binomial$new(prob = 0.5, size = 10) %>% truncate(3, 7)
plot(TB$pdf(1:10))
plot(TB$pdf(1:10), type = "l")
# 3. Sample from a Normal distribution with precision 5, mean 42
Normal$new(prec = 5, mean = 42)$rand(10)
# 4. Construct an Exponential distribution with rate 2, update the parameters to get scale = 4
E <- Exponential$new(rate = 2)
E$setParameterValue(list(scale = 4))
E$setParameterValue(rate = 0.25)
E$setParameterValue(list(rate = 0.25))
E$parameters()
E$getParameterValue("scale")
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = dchisq, cdf = pchisq)
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = function(x1) return(1/5)
support = Interval$new(1:6))
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = function(x1) return(1/5),
support = Interval$new(1:6))
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = function(x1) return(1/5),
support = Interval$new(1, 6))
D
D$pdf(1)
D$pdf(0)
D$pdf(1)
D$pdf(6)
D$pdf(7)
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = function(x1) return(1/5),
cdf = function(x1) return((x1 - 1)/5),
support = Interval$new(1, 6))
plot(D$pdf(1:5))
plot(D$pdf(0:7))
plot(D$pdf(0:7), type = "l")
plot(D$pdf(0:7), type = "p")
plot(D$cdf(0:7), type = "l")
plot(x = 0:7, y = D$pdf(0:7), type = "p")
plot(x = 0:7, y = D$cdf(0:7), type = "l")
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new()
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics)
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
Normal$new(decorators = ExoticStatistics)
N <- Normal$new() %>% decorate(ExoticStatistics)
assign("a",1,pos = as.environment("package:distr6"))
assign("a",1,envir = as.environment("package:distr6"))
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new() %>% decorate(ExoticStatistics, R62S3 = FALSE)
N
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
Normal$new() %>% decorate(ExoticStatistics, R62S3 = FALSE)
Normal$new()
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
decorate(Normal$new(), ExoticStatistics, R62S3 = FALSE)
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- decorate(Normal$new(), ExoticStatistics, R62S3 = FALSE)
N
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new()
decorate(N, ExoticStatistics, R62S3 = FALSE)
N
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new() %>% decorate(ExoticStatistics, R62S3 = FALSE)
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics, R622S3 = FALSE)
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics, R62S3 = FALSE)
?ExoticStatistics
N$pdfPNorm(p = 4, lower = 4, upper = 9)
?MixtureDistribution
# 9. Plot the cdf of the Mixture_Norm_Binom with weights (0.1, 0.9) distribution.
M <- MixtureDistribution$new(distlist = list(Normal$new(), Binomial$new()),
weights = list(0.1, 0.9))
# 9. Plot the cdf of the Mixture_Norm_Binom with weights (0.1, 0.9) distribution.
M <- MixtureDistribution$new(distlist = list(Normal$new(), Binomial$new()),
weights = c(0.1, 0.9))
M
plot(M$cdf(-10:10))
plot(M$cdf(-10:10), type = "l")
plot(M$cdf(-10:10), type = "p")
plot(M$cdf(-10:100), type = "p")
plot(M$cdf(-10:10), type = "p")
plot(x = -10:10, y = M$cdf(-10:10), type = "p")
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
library(magrittr)
# 1. Find the number 1.96 from the Normal distribution
Normal$new()$quantile(0.975)
# 2. Plot the pmf of a Truncated Binomial distribution between 3 and 7 -
#   Note: Think about the original size of the distribution
TB <- Binomial$new(prob = 0.5, size = 10) %>% truncate(3, 7)
plot(TB$pdf(1:10), type = "l")
# 3. Sample from a Normal distribution with precision 5, mean 42
Normal$new(prec = 5, mean = 42)$rand(10)
# 4. Construct an Exponential distribution with rate 2, update the parameters to get scale = 4
E <- Exponential$new(rate = 2)
E$setParameterValue(list(scale = 4)) # Fails because of parameterisation
E$setParameterValue(list(rate = 0.25))
E$getParameterValue("scale")
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = function(x1) return(1/5),
cdf = function(x1) return((x1 - 1)/5),
support = Interval$new(1, 6))
plot(x = 0:7, y = D$pdf(0:7), type = "p")
plot(x = 0:7, y = D$cdf(0:7), type = "l")
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics, R62S3 = TRUE)
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics, R62S3 = TRUE)
decorate
remotes::install_github("RaphaelS1/distr6","dev")
remotes::install_github("RaphaelS1/distr6","dev",force = T)
decorate
library(distr6)
decorate
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics, R62S3 = TRUE)
N <- Normal$new()
decorate(N, ExoticStatistics)
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics, R62S3 = TRUE)
N$pdfPNorm(p = 4, lower = 4, upper = 9)
remotes::install_github("RaphaelS1/distr6","dev")
?pgf
library(distr6)
?pgf
pgf(Binomial$new(),1)
B=Binomial$new(decorators = CoreStatistics)
pgf(Binomial$new(),1)
pgf(Binomial$new(),1)
pgf.Distribution(Binomial$new(),1)
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
library(distr6)
library(distr6)
View(testSkewness)
?checkSkewness
?checkSkewness
checkSkewness(Binomial$new())
testSkewness(Binomial$new())
remotes::install_github("raphaels1/distr6","dev")
library(distr6)
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
library(magrittr)
# 1. Find the number 1.96 from the Normal distribution
Normal$new()$quantile(0.975)
# 2. Plot the pmf of a Truncated Binomial distribution between 3 and 7 -
#   Note: Think about the original size of the distribution
TB <- Binomial$new(prob = 0.5, size = 10) %>% truncate(3, 7)
plot(TB$pdf(1:10), type = "l")
# 3. Sample from a Normal distribution with precision 5, mean 42
Normal$new(prec = 5, mean = 42)$rand(10)
# 4. Construct an Exponential distribution with rate 2, update the parameters to get scale = 4
E <- Exponential$new(rate = 2)
E$setParameterValue(list(scale = 4)) # Fails because of parameterisation
E$setParameterValue(list(rate = 0.25))
E$getParameterValue("scale")
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = function(x1) return(1/5),
cdf = function(x1) return((x1 - 1)/5),
support = Interval$new(1, 6))
plot(x = 0:7, y = D$pdf(0:7), type = "p")
plot(x = 0:7, y = D$cdf(0:7), type = "l")
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new()
pdfPNorm(N, 4, 4, 9) # Fails as not decorated
N %>% decorate(ExoticStatistics)
N$pdfPNorm(p = 4, lower = 4, upper = 9)
# 9. Plot the cdf of the Mixture_Norm_Binom with weights (0.1, 0.9) distribution.
M <- MixtureDistribution$new(distlist = list(Normal$new(), Binomial$new()),
weights = c(0.1, 0.9))
plot(x = -10:10, y = M$cdf(-10:10), type = "p")
pdfPNorm(p = 4, lower = 4, upper = 9)
cf(N)
cf
force(Naturals)
distr6::cf
View(cf)
cf.Distribution
cf
methods(cf)
methods("cf")
methods("cf")
distr6::testSkewness
?distr6::testSkewness
?checkSkewness
distr6::checkSkewness
distr6::cf
methods(cf)
?pgf
methods(pgf)
methods("ogf")
methods("pgf")
remotes::install_github("RaphaelS1/distr6","dev", force = T)
library(distr6)
library(magrittr)
installed.packages("unknown")
RSmisc::ifnerror
methodname = RSmisc::ifnerror(get(methodname),
paste(names(methods)[[i]],R6Class$classname,sep="."))
methodname
methodname = "pdf"
methodname = RSmisc::ifnerror(get(methodname),
paste(names(methods)[[i]],R6Class$classname,sep="."))
source('~/GitHub/distr6/R/DistributionDecorator_CoreStatistics.R')
get("skewness")
obj = CoreStatistics
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
methods
i = 3
methodname = names(methods)[[i]]
methodname
methodname = RSmisc::ifnerror(get(methodname), paste(names(methods)[[i]],R6Class$classname,sep="."))
methodname
methodname
methodname = names(methods)[[i]]
methodname
get(methodname)
remotes::install_github("raphaels1/rsmisc","dev")
remotes::install_github("raphaels1/rsmisc")
RSmisc::ifnerror
source('~/GitHub/distr6/R/DistributionDecorator_CoreStatistics.R')
obj = CoreStatistics
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
methods
i = 3
methodname = names(methods)[[i]]
methodname = RSmisc::ifnerror(get(methodname), paste(names(methods)[[i]],R6Class$classname,sep="."))
methodname = RSmisc::ifnerror(get(methodname),
paste(names(methods)[[i]],R6Class$classname,sep="."),
methodname)
methodname
methodname="var"
methodname = RSmisc::ifnerror(get(methodname),
paste(names(methods)[[i]],R6Class$classname,sep="."),
methodname)
methodname = RSmisc::ifnerror(get(methodname),
paste(names(methods)[[i]],obj$classname,sep="."),
methodname)
methodname
source('~/GitHub/distr6/R/Distribution.R')
dispatchClasses = list(CoreStatistics,Distribution)
methodname = lapply(dispatchClasses, function(x) paste(names(methods)[[i]],x$classname,sep="."))
methodname
setwd("~/GitHub/R62S3")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
remotes::install_github("raphaels1/r62s3","dev")
devtools::load_all(".")
