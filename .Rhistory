expect_true(isGeneric("print"))
expect_true(any(grepl("nogen",methods("print"))))
expect_true(any(grepl("nogen",showMethods("print"))))
showMethods("print")
expect_true(any(grepl("gen",showMethods("print"))))
grepl("gen",showMethods("print"))
methods("prnt")
methods("print")
expect_true(any(grepl("gen",methods("printer"))))
gen <- R6::R6Class("gen",public = list(print = function(y) print(y)))
test_that("generic",{
expect_silent(R62S4(gen))
expect_equal(print(gen$new(), "Test Gen"), "Test Gen")
expect_true(isGeneric("print"))
expect_true(any(grepl("gen",methods("printer"))))
})
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
test_that("mask FALSE",{
expect_silent(R62S4(masker, package = .GlobalEnv, mask = FALSE))
expect_error(pdf(masker$new()))
expect_equal(pdf.masker(masker$new()), "Test masker")
})
test_that("mask FALSE",{
expect_silent(R62S4(masker, mask = FALSE))
expect_error(pdf(masker$new()))
expect_equal(pdf.masker(masker$new()), "Test masker")
})
pdf
?pdf
expect_error(R62S4(masker, mask = FALSE))
test_that("mask FALSE",{
expect_error(R62S4(masker, mask = FALSE))
})
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
test_that("mask TRUE",{
expect_silent(R62S4(masker, mask = TRUE))
expect_equal(pdf(masker$new()), "Test masker")
expect_equal(pdf.masker(masker$new()), "Test masker")
})
expect_silent(R62S4(masker, mask = TRUE))
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
obj = masker
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
i=1
methodname = names(methods)[[i]]
generic = FALSE
mask
mask=T
mask
x = tryCatch(methods(methodname),warning = function(w) w, error = function(e) e)
x
inherits(x, "condition")
!grepl("appears not to be S3 generic",x$message)
source('~/GitHub/R62S3/R/R62S4.R')
expect_silent(R62S4(masker, mask = TRUE))
expect_equal(pdf(masker$new()), "Test masker")
expect_equal(pdf.masker(masker$new()), "Test masker")
expect_true(any(grepl("masker",methods("pdf"))))
pdf
methods("pdf")
methods("printer")
expect_true(any(grepl("masker",methods("pdf"))))
source('~/GitHub/R62S3/R/R62S4.R')
library(testthat)
context("R62S4")
nogen <- R6::R6Class("nogen",public = list(printer = function(y) print(y)))
test_that("no generic",{
expect_silent(R62S4(nogen))
expect_equal(printer(nogen$new(),"Test No Gen"), "Test No Gen")
expect_true(isGeneric("printer"))
expect_true(any(grepl("nogen",methods("printer"))))
})
gen <- R6::R6Class("gen",public = list(print = function(y) print(y)))
test_that("generic",{
expect_silent(R62S4(gen))
expect_equal(print(gen$new(), "Test Gen"), "Test Gen")
expect_true(isGeneric("print"))
expect_true(any(grepl("gen",methods("printer"))))
})
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
test_that("mask FALSE",{
expect_error(R62S4(masker, mask = FALSE))
})
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
test_that("mask TRUE",{
expect_silent(R62S4(masker, mask = TRUE))
expect_equal(pdf(masker$new()), "Test masker")
expect_true(any(grepl("masker",methods("pdf"))))
})
source('~/GitHub/R62S3/R/R62S4.R')
packageName(.GlobalEnv)
x=packageName(.GlobalEnv)
x
packageName(.GlobalEnv)
?packageName
packageName()
?setMethod
?setGeneric
methods::getPackageName(.GlobalEnv)
library(testthat)
context("R62S4")
nogen <- R6::R6Class("nogen",public = list(printer = function(y) print(y)))
test_that("no generic",{
expect_silent(R62S4(nogen, package = ".GlobalEnv"))
expect_equal(printer(nogen$new(),"Test No Gen"), "Test No Gen")
expect_true(isGeneric("printer"))
expect_true(any(grepl("nogen",methods("printer"))))
})
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
test_that("mask FALSE",{
expect_error(R62S4(masker, mask = FALSE, package = ".GlobalEnv"))
})
R62S4(masker, mask = FALSE, package = ".GlobalEnv")
isGeneric("pdf")
pdf
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
R62S4(masker, mask = TRUE, package = ".GlobalEnv")
pdf
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
R62S4(masker, mask = FALSE, package = ".GlobalEnv")
rm(pdf)
R62S4(masker, mask = FALSE, package = ".GlobalEnv")
rm(pdf)
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
source('~/GitHub/R62S3/R/R62S4.R')
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
R62S4(masker, mask = FALSE, package = ".GlobalEnv")
rm(pdf)
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
R62S4(masker, mask = TRUE, package = ".GlobalEnv")
pdf
showMethods("pdf")
?setMethod
?setOldClass
nogen <- R6::R6Class("nogen",public = list(printer = function(y) print(y)))
gen <- R6::R6Class("gen",public = list(print = function(y) print(y)))
dispatchClasses = list(gen, nogen)
lapply(dispatchClasses,function(x) x$classname)
classnames = lapply(dispatchClasses,function(x) x$classname)
classnames
methods::setOldClass(classnames)
methods::setOldClass(Classes = classnames)
methods::setOldClass(Classes = unlist(classnames))
gen
nogen
lapply(classnames, function(x) methods::setOldClass(x))
gen
isClass("gen")
isClass("masker")
arg1 = formals(get(methodname))[1]
value = function(){}
formals(value) = c(arg1,formals(methods[[i]]),alist(...=))
methodname = "pdf"
arg1 = formals(get(methodname))[1]
value = function(){}
formals(value) = c(arg1,formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(get(object)[[method]], args)
},list(method=methodname, object = names(arg1)[[1]]))
i=1
value
methods::setMethod(methodname, classnames, def = value)
lapply(dispatchClasses, function(x)
methods::setMethod(methodname, x$classname, def = value)
)
source('~/GitHub/R62S3/R/R62S4.R')
library(testthat)
context("R62S4")
nogen <- R6::R6Class("nogen",public = list(printer = function(y) print(y)))
test_that("no generic",{
expect_silent(R62S4(nogen, package = ".GlobalEnv"))
expect_equal(printer(nogen$new(),"Test No Gen"), "Test No Gen")
expect_true(isGeneric("printer"))
expect_true(any(grepl("nogen",methods("printer"))))
})
R62S4(nogen, package = ".GlobalEnv")
obj = nogen
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
i=1
methodname = names(methods)[[i]]
generic = FALSE
methodname
generic
mask
rm(generic)
dispatchClasses = list(nogen)
lapply(dispatchClasses, function(x) methods::setOldClass(x$classname))
arg1 = formals(get(methodname))[1]
methodname
source('~/GitHub/R62S3/R/R62S4.R')
source('~/GitHub/R62S3/R/R62S4.R')
library(testthat)
context("R62S4")
nogen <- R6::R6Class("nogen",public = list(printer = function(y) print(y)))
test_that("no generic",{
expect_silent(R62S4(nogen, package = ".GlobalEnv"))
expect_equal(printer(nogen$new(),"Test No Gen"), "Test No Gen")
expect_true(isGeneric("printer"))
expect_true(any(grepl("nogen",methods("printer"))))
})
gen <- R6::R6Class("gen",public = list(print = function(y) print(y)))
test_that("generic",{
expect_silent(R62S4(gen, package = ".GlobalEnv"))
expect_equal(print(gen$new(), "Test Gen"), "Test Gen")
expect_true(isGeneric("print"))
expect_true(any(grepl("gen",methods("printer"))))
})
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
test_that("mask FALSE",{
expect_error(R62S4(masker, mask = FALSE, package = ".GlobalEnv"))
})
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
test_that("mask TRUE",{
expect_silent(R62S4(masker, mask = TRUE, package = ".GlobalEnv"))
expect_equal(pdf(masker$new()), "Test masker")
expect_true(any(grepl("masker",methods("pdf"))))
})
source('~/GitHub/R62S3/R/R62S4.R')
nogen <- R6::R6Class("nogen",public = list(printer = function(y) print(y)))
library(testthat)
source('~/GitHub/R62S3/R/R62Fun.R')
context("R62Fun")
nogen <- R6::R6Class("nogen",public = list(printer = function(y) print(y)))
test_that("no generic",{
expect_silent(R62Fun(nogen))
expect_equal(printer(nogen$new(),"Test No Gen"), "Test No Gen")
})
printer
setwd("~/GitHub/R62S3")
devtools::document()
devtools::check()
devtools::check()
devtools::check()
?setMethod
source('~/GitHub/R62S3/R/R62S4.R')
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
?R62S4
devtools::document()
?R62S3
devtools::load_all()
expect_silent(R62S4(nogen, package = ".GlobalEnv", assignEnvir = .GlobalEnv))
source('~/GitHub/R62S3/R/R62S4.R')
expect_silent(R62S4(nogen, package = ".GlobalEnv", assignEnvir = .GlobalEnv))
expect_silent(R62S4(nogen, package = ".GlobalEnv", assignEnvir = .GlobalEnv))
nogen <- R6::R6Class("nogen",public = list(printer = function(y) print(y)))
expect_silent(R62S4(nogen, package = ".GlobalEnv", assignEnvir = .GlobalEnv))
expect_equal(printer(nogen$new(),"Test No Gen"), "Test No Gen")
expect_true(isGeneric("printer"))
expect_true(any(grepl("nogen",methods("printer"))))
test_that("no generic",{
expect_silent(R62S4(nogen, package = ".GlobalEnv", assignEnvir = .GlobalEnv))
expect_equal(printer(nogen$new(),"Test No Gen"), "Test No Gen")
expect_true(isGeneric("printer"))
expect_true(any(grepl("nogen",methods("printer"))))
})
gen <- R6::R6Class("gen",public = list(print = function(y) print(y)))
test_that("generic",{
expect_silent(R62S4(gen, package = ".GlobalEnv"))
expect_equal(print(gen$new(), "Test Gen"), "Test Gen")
expect_true(isGeneric("print"))
expect_true(any(grepl("gen",methods("printer"))))
})
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
test_that("mask FALSE",{
expect_error(R62S4(masker, mask = FALSE, package = ".GlobalEnv"))
})
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
test_that("mask TRUE",{
expect_silent(R62S4(masker, mask = TRUE, package = ".GlobalEnv"))
expect_equal(pdf(masker$new()), "Test masker")
expect_true(any(grepl("masker",methods("pdf"))))
})
source('~/GitHub/R62S3/R/R62S4.R')
setMethod("printer","nogen",function() {})
?setMethod
source('~/GitHub/R62S3/R/R62S4.R')
packageName(.GlobalEnv)
?setGeneric
source('~/GitHub/R62S3/R/R62S4.R')
?getFunction
source('~/GitHub/R62S3/R/R62S4.R')
setMethod("printer","nogen",function() {})
setMethod(printer,"nogen",function() {})
setMethod("printer","nogen",function(a) {return(a)})
setMethod("printer","nogen",def = function(a) {return(a)})
source('~/GitHub/R62S3/R/R62S4.R')
?setMethod
source('~/GitHub/R62S3/R/R62S4.R')
nogen <- R6::R6Class("nogen",public = list(printer = function(y) print(y)))
test_that("no generic",{
expect_silent(R62S4(nogen, assignEnvir = .GlobalEnv))
expect_true(isGeneric("printer"))
expect_true(any(grepl("nogen",methods("printer"))))
expect_equal(printer(nogen$new(),"Test No Gen"), "Test No Gen")
})
?setGeneric
setGeneric
getFunction(name, mustFind = FALSE, where = where)
getFunction("printer", mustFind = FALSE, where = where)
getFunction("printer", mustFind = FALSE, where = topenv())
getFunction("printedr", mustFind = FALSE, where = topenv())
source('~/GitHub/R62S3/R/R62S4.R')
source('~/GitHub/R62S3/R/R62S4.R')
expect_silent(R62S4(nogen, assignEnvir = .GlobalEnv))
source('~/GitHub/R62S3/R/R62S4.R')
library(testthat)
context("R62S4")
nogen <- R6::R6Class("nogen",public = list(printer = function(y) print(y)))
test_that("no generic",{
expect_silent(R62S4(nogen, assignEnvir = .GlobalEnv))
expect_true(isGeneric("printer"))
expect_true(any(grepl("nogen",methods("printer"))))
expect_equal(printer(nogen$new(),"Test No Gen"), "Test No Gen")
})
source('~/GitHub/R62S3/R/R62S4.R')
test_that("mask TRUE",{
expect_silent(R62S4(masker, mask = TRUE, assignEnvir = .GlobalEnv))
expect_equal(pdf(masker$new()), "Test masker")
expect_true(any(grepl("masker",methods("pdf"))))
})
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
test_that("mask TRUE",{
expect_silent(R62S4(masker, mask = TRUE, assignEnvir = .GlobalEnv))
expect_equal(pdf(masker$new()), "Test masker")
expect_true(any(grepl("masker",methods("pdf"))))
})
R62S4(masker, mask = TRUE, assignEnvir = .GlobalEnv)
source('~/GitHub/R62S3/R/R62S4.R')
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
R62S4(masker, mask = TRUE, assignEnvir = .GlobalEnv)
pdf
source('~/GitHub/R62S3/R/R62S4.R')
R62S4(masker, mask = FALSE, assignEnvir = .GlobalEnv)
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
R62S4(masker, mask = FALSE, assignEnvir = .GlobalEnv)
pdf
source('~/GitHub/R62S3/R/R62S4.R')
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
test_that("mask FALSE",{
expect_error(R62S4(masker, mask = FALSE, assignEnvir = .GlobalEnv))
})
pdf
source('~/GitHub/R62S3/R/R62S4.R')
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
test_that("mask TRUE",{
expect_silent(R62S4(masker, mask = TRUE, assignEnvir = .GlobalEnv))
expect_equal(pdf(masker$new()), "Test masker")
expect_true(any(grepl("masker",methods("pdf"))))
})
source('~/GitHub/R62S3/R/R62S4.R')
?setMethod
source('~/GitHub/R62S3/R/R62S4.R')
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?setOldClass
source('~/GitHub/R62S3/R/R62S4.R')
devtools::check()
library(distr6)
E = Exponential$new()
E$entropy()
CoreStatistics
CoreStatistics$public_methods$entropy()
CoreStatistics$public_methods$entropy
CoreStatistics$public_methods$entropy(Exponential)
CoreStatistics$public_methods$entropy(Exponential$new())
self = Exponential$new()
CoreStatistics$public_methods$entropy()
Exponential$new()$entropy()
Exponential$new()$entropy
Exponential$new()$entropy(base = exp(1))
log(1)
log(1,base=2)
log(1,base=3)
self
E$pdf(0)
E$pdf(10)
E$sup()
E$inf()
-integrate(function(x) {
probs = self$pdf(x)
logs = log(self$pdf(x), base)
logs[probs==0] = 0
return(probs * logs)
}, lower = self$inf(), upper = self$sup())$value
base=2
-integrate(function(x) {
probs = self$pdf(x)
logs = log(self$pdf(x), base)
logs[probs==0] = 0
return(probs * logs)
}, lower = self$inf(), upper = self$sup())$value
self = Exponential$new(2)
self$parameters()
-integrate(function(x) {
probs = self$pdf(x)
logs = log(self$pdf(x), base)
logs[probs==0] = 0
return(probs * logs)
}, lower = self$inf(), upper = self$sup())$value
1-log(2)
1-log(2,base=2)
log(2,base=2)
base=exp(1)
1-log(2)
-integrate(function(x) {
probs = self$pdf(x)
logs = log(self$pdf(x), base)
logs[probs==0] = 0
return(probs * logs)
}, lower = self$inf(), upper = self$sup())$value
1-log(1)
1-log(3)
self = Exponential$new(3)
-integrate(function(x) {
probs = self$pdf(x)
logs = log(self$pdf(x), base)
logs[probs==0] = 0
return(probs * logs)
}, lower = self$inf(), upper = self$sup())$value
self = Exponential$new(1)
-integrate(function(x) {
probs = self$pdf(x)
logs = log(self$pdf(x), base)
logs[probs==0] = 0
return(probs * logs)
}, lower = self$inf(), upper = self$sup())$value
1-log(1)
CoreStatistics$public_methods$entropy()
CoreStatistics$public_methods$entropy(base = exp(1))
self
self = Exponential$new(3)
CoreStatistics$public_methods$entropy(base = exp(1))
1-log(3)
source('~/GitHub/R62S3/R/R62S4.R')
Exponential$new(2) %>% entropy()
x=Exponential$new(2)
x$entropy()
x$entropy(exp(1))
1 - log(2)
library(testthat)
context("R62S4")
nogen <- R6::R6Class("nogen",public = list(printer = function(y) print(y)))
test_that("no generic",{
expect_silent(R62S4(nogen, assignEnvir = .GlobalEnv))
expect_true(isGeneric("printer"))
expect_true(any(grepl("nogen",methods("printer"))))
expect_equal(printer(nogen$new(),"Test No Gen"), "Test No Gen")
})
printer
showMethods("printer")
devtools::document()
devtools::load_all()
devtools::check()
methods("pdf")
printer <- R6::R6Class("masker",public = list(print = function() return("Test printer")))
test_that("mask TRUE s3gen",{
expect_silent(R62S3(printer, assignEnvir = .GlobalEnv, mask = TRUE))
expect_equal(pdf(printer$new()), "Test printer")
expect_equal(pdf.masker(printer$new()), "Test printer")
})
expect_silent(R62S3(printer, assignEnvir = .GlobalEnv, mask = TRUE))
expect_equal(pdf(printer$new()), "Test printer")
expect_equal(print(printer$new()), "Test printer")
expect_equal(pdf.masker(printer$new()), "Test printer")
expect_equal(print.masker(printer$new()), "Test printer")
test_that("mask TRUE s3gen",{
expect_silent(R62S3(printer, assignEnvir = .GlobalEnv, mask = TRUE))
expect_equal(print(printer$new()), "Test printer")
expect_equal(print.masker(printer$new()), "Test printer")
})
printer <- R6::R6Class("masker",public = list(printer = function() return("Test printer")))
test_that("mask TRUE no gen",{
expect_silent(R62S3(printer, assignEnvir = .GlobalEnv, mask = TRUE))
expect_equal(printer(printer$new()), "Test printer")
expect_equal(printer.masker(printer$new()), "Test printer")
})
expect_equal(printer.printer(printer$new()), "Test printer")
printer <- R6::R6Class("masker",public = list(printer = function() return("Test printer")))
test_that("mask TRUE no gen",{
expect_silent(R62S3(printer, assignEnvir = .GlobalEnv, mask = TRUE))
expect_equal(printer(printer$new()), "Test printer")
expect_equal(printer.printer(printer$new()), "Test printer")
})
expect_silent(R62S3(printer, assignEnvir = .GlobalEnv, mask = TRUE))
printer <- R6::R6Class("masker",public = list(printer = function() return("Test printer")))
printer <- R6::R6Class("masker",public = list(prints = function() return("Test printer")))
test_that("mask TRUE no gen",{
expect_silent(R62S3(printer, assignEnvir = .GlobalEnv, mask = TRUE))
expect_equal(prints(printer$new()), "Test printer")
expect_equal(prints.printer(printer$new()), "Test printer")
})
printer <- R6::R6Class("masker",public = list(prints = function() return("Test printer")))
expect_silent(R62S3(printer, assignEnvir = .GlobalEnv, mask = TRUE))
expect_equal(prints(printer$new()), "Test printer")
printer <- R6::R6Class("printer",public = list(prints = function() return("Test printer")))
test_that("mask TRUE no gen",{
expect_silent(R62S3(printer, assignEnvir = .GlobalEnv, mask = TRUE))
expect_equal(prints(printer$new()), "Test printer")
expect_equal(prints.printer(printer$new()), "Test printer")
})
